Large programs are often made up of many smaller sub-programs. For example,
a web server handles requests made from web browsers and serves up HTML web
pages in response. Each request is handled like a small program.

It would be ideal for programs like these to be able to run their smaller 
components at the same time (in the case of the web server to handle multiple
requests). Making progress on more than one task simultaneously is known
as concurrency. Go has rich support for concurrency using goroutines
and channels.

Goroutines
A goroutine is a function that is capable of running concurrently with 
other functions. To create a goroutine we use the keyword 'go' followed by 
a function invocation (see concurrency.go).

concurrency.go consists of two goroutines. The first goroutine is implicit
and is the main function itself. The second goroutine is created when we call 
'go f(0)'. Normally when we invoke a function our program will execute all 
the statements in a function and then return to the next line following the 
invocation. With a goroutine we return immediately to the next line and don't 
wait for the function to complete. This is why the call to the 'Scanln'
function has been included; without it the program would exit before being
given the opportunity to print all the numbers.

Goroutines are lightweight and we can easily create thousands of them. We 
can modify our program to run 10 goroutines:

	func main() {
		for i := 0; i < 10; i++ {
			go f(i)
		}
		var input string
		fmt.Scanln(&input)
	}

When we run this program (concurrency_2.go), it seems to run the goroutines in 
order rather than simultaneously. We can add some delay to the function using 
'time.Sleep' and 'rand.Intn' (see concurrency_3.go). 'f' prints out the 
numbers from 0 to 10, waiting between 0 and 250 ms after each one. The goroutines
should run simultaneously.

Channels
Channels provide a way for two goroutines to communicate with one another and 
synchronize their execution (see channels.go).

channels.go will print "ping" forever. A channel type is represented with the 
keyword 'chan' followed by the type of the things that are passed on the channel
(in this case we are passing strings). The '<-' (left arrow) operator is used to
send and receive messages on the channel. 

		'c <- "ping"' means send "ping".

		'msg := <- c' means receive a message and store it in 'msg'

The 'fmt' line could also have been written like this:

		fmt.Println(<- c)

in which case we could remove the previous line.

Using a channel like this synchrnizes the two goroutines. When 'pinger' attempts 
to send a message on the channel it will wait until 'printer' is ready to receive
the message (also known as "blocking").

Channel Direction
We can specify a direction on a channel type thus restricting it to either 
sending or receiving. For example, pinger's function signiture can be changed to this:

		func pinger (c chan <- string)

Now 'c' can only be sent to. Attempting to receive 'c' will result in a compile error.
Similarly we can change printer to:

		func printer (c <- chan string)

A channel that doesn't have these restrictions is known as bi-directional. A
bi-directional channel can be passed to a function that takes send-only or receive-only
channels, but the reverse is not true.

Select
Go has a special statement called 'select' which works like a 'switch' but for channels.
(see channels_select_statement.go)

Buffered Channels
It is also possible to pass a second parameter to the make function when creating a 
channel:

		c := make(chan int, 1)

This creates a buffered channel with a capacity of 1. Normally channels are synchronous;
both sides of the channel will wait until the other side is ready. A buffered channel
will wait until the other side is ready. A buffered channel is asynchronous; sending 
or receiving a message will not wait unless the channel is already full.
